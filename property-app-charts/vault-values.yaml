postgres:
  serviceAccount:
    create: true
    name: "property-app-postgres"
  
  vault:
    enabled: true
    role: "postgres-role"
    secretPath: "property-app/database"  # Using the correct path without /data/
  
  podAnnotations:
    # Disable Istio injection so that no Istio init containers interfere
    sidecar.istio.io/inject: "false"
    # Enable Vault injection and force its init container to run first
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/agent-inject-init-first: "true"
    vault.hashicorp.com/role: "postgres-role"
    vault.hashicorp.com/address: "http://vault.vault:8200"
    vault.hashicorp.com/agent-inject-secret-postgres-creds: "property-app/database"
    vault.hashicorp.com/agent-inject-template-postgres-creds: |
      {{- with secret "property-app/database" -}}
      #!/bin/sh
      export POSTGRES_USER="{{ .Data.data.user }}"
      export POSTGRES_PASSWORD="{{ .Data.data.password }}"
      export POSTGRES_DB="{{ .Data.data.database }}"
      {{- end -}}
  
  # Using a more resilient init container approach with wait logic 
  extraInitContainers:
    - name: postgres-init-scripts
      # Using Kubernetes mirror to avoid Docker Hub rate limits
      image: registry.k8s.io/e2e-test-images/busybox:1.29-2
      command:
        - sh
        - -c
        - |
          # Wait for the file to exist (up to 60 seconds)
          for i in $(seq 1 60); do
            if [ -f /vault/secrets/postgres-creds ]; then
              echo "Found /vault/secrets/postgres-creds file, continuing..."
              cp /vault/secrets/postgres-creds /docker-entrypoint-initdb.d/init-db.sh &&
              chmod +x /docker-entrypoint-initdb.d/init-db.sh &&
              echo "File copied successfully"
              exit 0
            fi
            echo "Waiting for /vault/secrets/postgres-creds to be created... ($i/60)"
            sleep 1
          done
          echo "Timed out waiting for /vault/secrets/postgres-creds"
          ls -la /vault/secrets/
          exit 1
      volumeMounts:
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        - name: vault-secrets
          mountPath: /vault/secrets
  
  extraVolumes:
    - name: init-scripts
      emptyDir: {}
  
  extraVolumeMounts:
    - name: init-scripts
      mountPath: /docker-entrypoint-initdb.d

backend:
  serviceAccount:
    create: true
    name: "property-app-backend"
  
  vault:
    enabled: true
    role: "postgres-role"
    secretPath: "property-app/database"  # Using the correct path without /data/
  
  podAnnotations:
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/agent-inject-init-first: "true"
    vault.hashicorp.com/role: "postgres-role"
    vault.hashicorp.com/address: "http://vault.vault:8200"
    vault.hashicorp.com/agent-inject-secret-database-config: "property-app/database"
    vault.hashicorp.com/agent-inject-template-database-config: |
      {{- with secret "property-app/database" -}}
      #!/bin/sh
      export DATABASE_URL="postgres://{{ .Data.data.user }}:{{ .Data.data.password }}@property-app-postgres.property-app.svc.cluster.local:5432/{{ .Data.data.database }}?sslmode=disable"
      {{- end -}}