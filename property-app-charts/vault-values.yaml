postgres:
  serviceAccount:
    create: true
    name: "property-app-postgres"
  
  vault:
    enabled: true
    role: "postgres-role"
    secretPath: "property-app/database"  # CHANGED: Removed /data/
  
  podAnnotations:
    # Disable Istio injection so that no Istio init containers interfere
    sidecar.istio.io/inject: "false"
    # Enable Vault injection and force its init container to run first
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/agent-inject-init-first: "true"
    vault.hashicorp.com/role: "postgres-role"
    vault.hashicorp.com/address: "http://vault.vault:8200"
    vault.hashicorp.com/agent-inject-secret-postgres-creds: "property-app/database"  # CHANGED: Removed /data/
    vault.hashicorp.com/agent-inject-template-postgres-creds: |
      {{- with secret "property-app/database" -}}  # CHANGED: Removed /data/
      #!/bin/sh
      export POSTGRES_USER="{{ .Data.data.user }}"
      export POSTGRES_PASSWORD="{{ .Data.data.password }}"
      export POSTGRES_DB="{{ .Data.data.database }}"
      {{- end -}}
  
  # Note about init container ordering:
  # The "z-init-postgres-scripts" name is actually correct - it starts with "z" to ensure
  # it runs AFTER the Vault agent init container, which starts with "v" (alphabetical order)
  extraInitContainers:
    - name: z-init-postgres-scripts
      image: busybox
      command:
        - sh
        - -c
        - >
          ls -la /vault/secrets/ &&
          if [ -f /vault/secrets/postgres-creds ]; then
            cp /vault/secrets/postgres-creds /docker-entrypoint-initdb.d/init-db.sh &&
            chmod +x /docker-entrypoint-initdb.d/init-db.sh &&
            echo "File copied successfully";
          else
            echo "Source file does not exist";
            exit 1;
          fi
      volumeMounts:
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
  
  extraVolumes:
    - name: init-scripts
      emptyDir: {}
  
  extraVolumeMounts:
    - name: init-scripts
      mountPath: /docker-entrypoint-initdb.d

backend:
  serviceAccount:
    create: true
    name: "property-app-backend"
  
  vault:
    enabled: true
    role: "postgres-role"
    secretPath: "property-app/database"  # CHANGED: Removed /data/
  
  podAnnotations:
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/agent-inject-init-first: "true"
    vault.hashicorp.com/role: "postgres-role"
    vault.hashicorp.com/address: "http://vault.vault:8200"
    vault.hashicorp.com/agent-inject-secret-database-config: "property-app/database"  # CHANGED: Removed /data/
    vault.hashicorp.com/agent-inject-template-database-config: |
      {{- with secret "property-app/database" -}}  # CHANGED: Removed /data/
      #!/bin/sh
      export DATABASE_URL="postgres://{{ .Data.data.user }}:{{ .Data.data.password }}@property-app-postgres.property-app.svc.cluster.local:5432/{{ .Data.data.database }}?sslmode=disable"
      {{- end -}}